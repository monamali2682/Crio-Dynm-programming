Ref : watch dsa 5 - session 4 recording  & TechDose on youtube
Time = o(N^2)    Space = O(N^2)
Better Approach -  with Space O(1)- without Dynamic Programming - Neetcode Youtube 

Problem Description
Given a string, find the length of its Longest Palindromic Substring.
In a palindromic string, elements read the same backward and forward.
Input format
First line contains T, the number of test cases.
First line of each test case contains integer N, the length of the String.
Second line of each test case contains the string S.
Output format
Print the length of the longest palindromic substring for each test case on a separate line.
Constraints
T <= 20
N <= 500
Sum of N over all test cases does not exceed 1000.
Sample Input 1
2
6
abcpca
3
abc
Sample Output 1
3
1

SOLUTION :
import java.util.*;
public class LongestPalindromicSubstringLength{ 
    // dp[i][j] tells if string from i to j is palindrome or not
    // max value of (i-j) will be the answer
    static int longestPalindromicSubstringLength(String str) { 
        int n= str.length();
        if(n==0) return 0;
        int[][] dp = new int[n][n];
        // why default values of all cells are taken 1?
        // e.g. if  i=1 & j=2, if both letters at i & j matches, ans should be true since there are 
        // no letters in between i=1 and j=2. 
        // if letter matches, from equation ans will be dp[i+1][j-1] = dp[2][1] ,value of which should
        // be true by default
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                dp[i][j]=1; // 1 is True
            }      
        }

        // base case diagonal elements will be true
        // no need to make them 1, as default value is 1
        // for(int i=0;i<n;i++){
        //     dp[i][i]=1;  // 1 is True
        // }
        int ans=1;
        // filling upper triangular dp matrix 
        // equation of diagonal at distance d is,  y = x+d
        for(int d=1;d<n;d++){
            for(int x=0;x<n-d;x++){
                int y= x+d  ;
                if(str.charAt(x)==str.charAt(y)){
                    dp[x][y]= dp[x+1][y-1];
                }
                else{
                    dp[x][y]=0;
                }
                if(dp[x][y]==1){
                    ans= Math.max(ans,y-x+1);
                }
            }
        }
        return ans;
    } 


    public static void main(String[] args) { 
        Scanner sc = new Scanner(System.in);
        int t= sc.nextInt();
        for(int tests=0;tests<t;tests++)
        {
            int n= sc.nextInt();
            String s= sc.next();
            System.out.println(longestPalindromicSubstringLength(s));
        }
    } 
}
