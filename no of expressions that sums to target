Problem Description
You are given an integer array nums and an integer target.
You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

import java.util.*;

class TargetSum{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int target = sc.nextInt();
        int[] nums = new int[n];
        for(int i=0;i<n;i++){
            nums[i] = sc.nextInt();
        }
        System.out.println(targetSum(nums,target));
        sc.close();
    }

    static int helperNumWays(int currSum,int currIdx, int[] nums,int target, int[][] dp,int allsum){       int n= nums.length;
        // taking initial sum as currsum & starting from currindex ,can you reach the
        // stage when sum is targetsum & index is n-1
        if(currIdx==n){
            if(currSum==target){
                return 1;
            }
            return 0;
        }
        if(dp[currIdx][currSum+allsum]!=-1){
            return dp[currIdx][currSum+allsum];
        }
        //if you attach minus to curr element & go to next index,currsum will decrease 
        //by curr element
        int minus = helperNumWays(currSum-nums[currIdx],currIdx+1,nums,target,dp,allsum);
        // if you attach plus to currelement & go to nxt index, currsum will increase 
        // by curr element
        int plus= helperNumWays(currSum + nums[currIdx],currIdx+1,nums,target,dp,allsum);
        dp[currIdx][currSum+allsum]= minus+plus;
        return dp[currIdx][currSum+allsum];
    }

    static int targetSum(int[] nums,int target){
        int n= nums.length;
        int currSum=0;
        int currIdx =0;
        int allsum=0;
        for(int i=0;i<n;i++){
            allsum+=nums[i];
        }
        int[][] dp =new int[n+1][allsum*2 + 1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=allsum*2;j++){
                dp[i][j]=-1;
            }
        }
        int ans= helperNumWays(currSum,currIdx,nums,target,dp,allsum);
        return ans;
    }

}
