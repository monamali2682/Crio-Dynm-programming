//Problem Description
//Given a set of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum.
//Input format
//N- length of array
//T- Target number
//A- a set of size n
//Output format
//If it is possible to add a subset of numbers to make T return 1 else return 0.

import java.util.*;
class SubsetSum{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int n,t;
        n=sc.nextInt();
        t=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i]=sc.nextInt();
        }
        if(subsetSum(arr,t))
        {
            System.out.println(1);
        }
        else 
        {
            System.out.println(0);
        }
        
    }
    //PART ONE - Iterative DP
    // static int helperSubset(int a[], int sum,int[][] dp){
    //     int n= a.length;
    //     // base case for sum=0; filling first column
    //     for(int i=0;i<=n;i++){
    //         dp[i][0]=1;  // 1 ->true
    //     }
    //     // base case for n=0 , filling first row
    //     for(int j=1;j<=sum;j++){
    //         dp[0][j]=0;   // 0 ->false
    //     }
    //     // filling rest of DP table
    //     for(int i=1;i<=n;i++){
    //         for(int j=1;j<=sum;j++){
    //             int notPick = dp[i-1][j];
    //             int pick=0;
    //             if(a[i-1]<=j){
    //                 pick = dp[i-1][j-a[i-1]];
    //             }
    //             // pick or not pick
    //             if(pick==1 || notPick==1){
    //                 dp[i][j]=1;
    //             }
    //             else{
    //                 dp[i][j]=0;
    //             }
    //         }
    //     }
    //     return dp[n][sum];
    // }

    //PART 2 - Recursive DP
    static int helperSubset(int n,int a[], int sum,int[][] dp){
        if(sum==0){ return 1;}
        else if(n==0 && sum!=0){ return 0;}
        if(dp[n][sum]!=-1){ return dp[n][sum];}
        int notPick = helperSubset(n-1,a,sum,dp);
        int pick = 0;
        if(a[n-1]<=sum){
            pick  =helperSubset(n-1,a,sum-a[n-1],dp);
        }
        // pick or not pick
        if(pick==1 || notPick==1){
            dp[n][sum]=1;
        }
        else{
            dp[n][sum]=0;
        }
        return dp[n][sum];
    }

    static boolean subsetSum(int a[], int sum){
        int n= a.length;
        int[][] dp = new int[n+1][sum+1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=sum;j++){
                dp[i][j]=-1;
            }
        }
        
        int ans = helperSubset(n,a,sum,dp); // 
        if(ans==1){ return true;}//
        return false;//
    }
}
