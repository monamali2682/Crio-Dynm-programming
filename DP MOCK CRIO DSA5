# NOTE : Exactly same as  find number of ways to achieve target amount using unlimited coins
Given an infinite number of quarters (25 cents), dimes (10 cents), nickels (5 cents) and pennies (1 cent), 
calculate the number of ways of representing N cents.
Note: The combination of denominations is what is important. The order doesnâ€™t matter. 
For example, Nickel + Penny + Penny = 7 Cents or Penny + Nickel + Penny = 7 Cents, are both considered a single way of counting to 7 Cents 
since they have the same combination.

import java.util.*;

public class Coins {
    int countWays(int amount) {
        int[] coins= new int[]{1,5,10,25};
        int n= coins.length;
        int[][] dp= new int [n+1][amount+1];
		for(int i=0;i<=n;i++){
			for(int j=0;j<=amount;j++){
				dp[i][j]=-1;
			}
		}
		int ans= helperCoinChange(amount,coins,dp);
		return ans;
    }

    public static int helperCoinChange(int amount, int[] coins,int[][] dp) {
        int M = 1000000007;
        int n= coins.length;
		dp[0][0]=1;
		for(int j=1;j<=amount;j++){
			dp[0][j]=0;
		}
		for(int i=0;i<=n;i++){
			dp[i][0]=1;
		}
		for(int i=1;i<=n;i++){
			for(int j=1;j<=amount;j++){
			// not pick
			int pick = dp[i-1][j];
			// pick
			int notpick=0;
			if(coins[i-1]<=j){
				notpick= dp[i][j-coins[i-1]];
			}
			dp[i][j]=(pick+notpick)%M;
			}
		}
		return dp[n][amount];
	}
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Coins result = new Coins();
        int n = scanner.nextInt();
        int answer = result.countWays(n);
        System.out.println(answer);
        scanner.close();
    }
}
