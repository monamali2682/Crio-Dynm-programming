Problem Description
Given a list of N coin denominations and a total sum S. Return the minimum number of coins from the given denominations required
to form the given sum or report that it's not possible to select coins in such a way that they sum upto S.
You can assume you have an infinite number of each kind of coin.

import java.util.*;

class MinCoins{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();  
        int amt=sc.nextInt();
        int[] array = new int[n];   
        for(int i=0; i<n; i++)  
        {  
            array[i]=sc.nextInt();  
        }  
        System.out.println(minCoins(array,amt));

    }

    public static int minCoins(int []coins,int amount) {
        int n= coins.length;
		int[][] dp= new int [n+1][amount+1];
		for(int i=0;i<=n;i++){
			for(int j=0;j<=amount;j++){
				dp[i][j]=-2;
			}
		}
		int ans= helperminCoins(amount,n,coins,dp);
		return ans;
	}

    // recursive DP -- fails 4 testcases because of excessive size of callstack
    // so write iterative DP for same logic
    // static int helperminCoins(int amount,int n,int[] coins, int[][] dp){
	// 	if(n==0){
	// 		if(amount==0){
	// 			return 0;
	// 		}
	// 		return -1;
	// 	}
	// 	if(amount==0){
	// 		return 0;
	// 	}
	// 	if(dp[n][amount]!=-2){return dp[n][amount];}
	// 	// not pick
	// 	int notpick = helperminCoins(amount,n-1,coins,dp);
	// 	// pick
	// 	int pick=-1;
	// 	if(coins[n-1]<=amount){
	// 		pick=helperminCoins(amount-coins[n-1],n,coins,dp);
	// 	}
    //     if(pick==-1 && notpick==-1){
    //         dp[n][amount]=-1;
    //     }
    //     else if(pick==-1){
    //         dp[n][amount]= notpick;
    //     }
    //     else if(notpick==-1){
    //         dp[n][amount]=pick+1;
    //     }
    //     else{
    //         dp[n][amount]= Math.min(pick+1,notpick);
    //     }
	// 	return dp[n][amount];
	// }

    // iterative - passes all testcases
    static int helperminCoins(int amount,int n,int[] coins, int[][] dp) {
		for(int j=0;j<amount;j++){
			dp[n][j]=-1;
		}
		for(int i=0;i<=n;i++){
			dp[i][amount]=0;
		}
		for(int i=n-1;i>=0;i--){
			for(int j=amount-1;j>=0;j--){
                // not pick
                int notpick = dp[i+1][j];
                // pick
                int pick=-1; // tae default val as not possible
                if(coins[i]+j<=amount){
                    pick= dp[i][j+coins[i]];
                }
                if(pick==-1 && notpick==-1){
                    dp[i][j]=-1;
                }
                else if(pick==-1){
                    dp[i][j]= notpick;
                }
                else if(notpick==-1){
                    dp[i][j]=pick+1;
                }
                else{
                    dp[i][j]= Math.min(pick+1,notpick);
                }
			}
		}
		return dp[0][0];
	}

}
