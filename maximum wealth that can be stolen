An infamous thief goes by the name of Kalia. He is famous for his sheer skills in the field of burglary.
His next target is a colony containing houses with enormous wealth. A given input array represents the wealth of each house in the colony.
He wants to steal the maximum possible wealth in one go, but needs to be cautious. He cannot steal from consecutive houses as that would trigger the security alarm.
You are his sidekick. Help him find the maximum wealth he can steal.
_______________________________________________________________________________________________
import java.util.*;
import java.lang.Math;
class HouseThief {
	public static long houseThief(int n, int []arr) {
		long[] dp = new long[n+1];
		for(int i=0;i<=n;i++){
			dp[i]=-1L;
		}
		long ans = helperMaxWealth(n,arr,dp);
		return ans;
	}

	//PART One - Recursive DP
	// recursive function which gives max wealth that can be created i.e current wealth plus
	// wealth from remaining n number of homes
	// public static long helperMaxWealth(int n,int[] arr,long[] dp){
	// 	if(n==0){ 
	// 		return dp[n]=0L;   // zero element left
	// 	} 
	// 	if(n==1) { 
	// 		return dp[n]= arr[0];  // only 1 element is left which is at idx 0
	// 	} 
	// 	if(dp[n]!=-1L){return dp[n];}
	// 	// picking last element from n elements
	// 	long pick = arr[n-1]+helperMaxWealth(n-2,arr,dp);  // if picked add wealth of curr
	// 	// not picking
	// 	long notPick= helperMaxWealth(n-1,arr,dp);  
	// 	dp[n]= Math.max(notPick,pick);;
	// 	return dp[n];
	// } 

	// Iterative DP
	public static long helperMaxWealth(int n,int[] arr,long[] dp){
		dp[0] = 0;
		if(n>=1){
			dp[1] = arr[0];
		}
		for(int i=2;i<=n;i++){
			// picking last element from n elements
			long pick = arr[i-1]+dp[i-2];  // if picked add wealth of curr
			// not picking
			long notPick= dp[i-1];  
			dp[i]= Math.max(notPick,pick);
		}
		return dp[n];
	} 


	public static void main(String []args) {

		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int []arr = new int [n];
		for ( int i = 0; i < n; i++) {
			arr[i] = sc.nextInt();
		}
		long ans = houseThief(n, arr);
		System.out.println(ans);

	}
}
