Problem Description
Given a list of integers, find the length of the longest increasing subsequence.
Input format
First line contains an integer N - Number of integers in the list.
Second line contains N integers.
Output format
Print the length of longest increasing subsequence.

Sample Input 1
7
5 4 1 6 2 2 3

Sample Output 1
3

Solution: 
import java.util.*;
// direct tabulation same as longest common substring
// time = o(N^2)
// space = o(N)
// ref :- striver video Dp series-42

class LongestIncreasingSubsequence{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int n =sc.nextInt();
        Vector<Integer> vec = new Vector<Integer>();
        for(int i=0;i<n;i++)
        	vec.add(sc.nextInt());
        System.out.println(longestIncreasingSubsequence(vec));
    }

    private static int longestIncreasingSubsequence(Vector<Integer> vec){
        int n = vec.size();
        if(n==0) {
            return 0;
        }
        int[] dp = new int[n];
        for(int i=0;i<n;i++){
            dp[i]=1;
        }
        // dp[i] = longest subsequence ending at index i
        int maxLength=1;
        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                if(vec.get(i)>vec.get(j)){
                    dp[i] = Math.max( dp[i],1+dp[j]);
                }
            }
            maxLength= Math.max(maxLength,dp[i]);   
        }
        return maxLength;
    }
}
